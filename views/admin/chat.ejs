

<section class="admin-chat-section">
    <div class="container">
        <div class="admin-header">
            <h1>Chat Management</h1>
            <p>Manage customer conversations</p>
        </div>
        
        <div class="admin-nav">
            <a href="/admin/dashboard" class="nav-btn">Dashboard</a>
            <a href="/admin/users" class="nav-btn">Users</a>
            <a href="/admin/chat" class="nav-btn active">Chat</a>
            <a href="/admin/updates" class="nav-btn">Updates</a>
            <a href="#" onclick="showLogoutModal()" class="nav-btn logout">Logout</a>
        </div>
        
        <div class="chat-management-container">
            <div class="chat-list">
                <h3>Active Conversations</h3>
                <div class="conversations-list">
                    <% chats.forEach(chat => { %>
                    <div class="conversation-item" onclick="loadChat('<%= chat.user.sessionId %>')" data-session="<%= chat.user.sessionId %>">
                        <div class="user-info">
                            <h4><%= chat.user.name %></h4>
                            <p><%= chat.user.email %></p>
                        </div>
                        <div class="conversation-meta">
                            <% if (chat.lastMessage) { %>
                                <div class="last-message">
                                    <%= chat.lastMessage.message.substring(0, 50) %>...
                                </div>
                                <div class="message-time">
                                    <%= new Date(chat.lastMessage.createdAt).toLocaleDateString() %>
                                </div>
                            <% } %>
                            <% if (chat.unreadCount > 0) { %>
                                <div class="unread-badge"><%= chat.unreadCount %></div>
                            <% } %>
                        </div>
                    </div>
                    <% }) %>
                </div>
            </div>
            
            <div class="chat-window">
                <div id="chatHeader" class="chat-header" style="display: none;">
                    <h3 id="chatUserName">Select a conversation</h3>
                    <div class="chat-status online">‚óè Online</div>
                </div>
                
                <div id="chatMessages" class="chat-messages">
                    <div class="empty-state">
                        <p>Select a conversation to start chatting</p>
                    </div>
                </div>
                
                <div id="chatInput" class="chat-input-area" style="display: none;">
                    <div class="chat-input-container">
                        <input type="text" id="messageInput" placeholder="Type your message..." maxlength="500">
                        <button id="sendMessage">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Admin Logout Modal -->
<div id="adminLogoutModal" class="modal">
    <div class="modal-content">
        <h3>Confirm Logout</h3>
        <p>Are you sure you want to log out of the admin panel?</p>
        <div class="modal-actions">
            <button onclick="closeLogoutModal()" class="btn btn-secondary">Cancel</button>
            <button onclick="confirmAdminLogout()" class="btn btn-primary">Yes, Logout</button>
        </div>
    </div>
</div>

<script>
const socket = io();
let currentSessionId = null;
let currentUser = null;

function loadChat(sessionId) {
    // Update active conversation
    document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelector(`[data-session="${sessionId}"]`).classList.add('active');
    
    fetch(`/admin/chat/${sessionId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                currentSessionId = sessionId;
                currentUser = data.user;
                
                // Update UI
                document.getElementById('chatUserName').textContent = data.user.name;
                document.getElementById('chatHeader').style.display = 'block';
                document.getElementById('chatInput').style.display = 'block';
                
                // Load messages
                const messagesContainer = document.getElementById('chatMessages');
                messagesContainer.innerHTML = '';
                
                data.messages.forEach(message => {
                    addMessageToChat(message);
                });
                
                // Join room for real-time updates
                socket.emit('join-room', sessionId);
                
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Clear unread badge
                const unreadBadge = document.querySelector(`[data-session="${sessionId}"] .unread-badge`);
                if (unreadBadge) {
                    unreadBadge.style.display = 'none';
                }
            }
        })
        .catch(error => {
            console.error('Error loading chat:', error);
        });
}

function addMessageToChat(message) {
    const messagesContainer = document.getElementById('chatMessages');
    
    // Check for duplicate messages
    const existingMessages = messagesContainer.querySelectorAll('.message');
    const lastMessage = existingMessages[existingMessages.length - 1];
    if (lastMessage) {
        const lastMessageText = lastMessage.querySelector('.message-text')?.textContent;
        if (lastMessageText === message.message) {
            return; // Skip duplicate
        }
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${message.senderType}`;
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-text">${message.message}</div>
            <div class="message-time">${new Date(message.createdAt || message.timestamp).toLocaleString()}</div>
        </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Send message
document.getElementById('sendMessage').addEventListener('click', sendMessage);
document.getElementById('messageInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

function sendMessage() {
    const input = document.getElementById('messageInput');
    const message = input.value.trim();
    
    if (!message || !currentSessionId) return;
    
    // Clear input immediately
    input.value = '';
    
    // Send message via socket
    socket.emit('chat-message', {
        sessionId: currentSessionId,
        sender: 'Admin',
        senderType: 'admin',
        message: message
    });
}

// Listen for incoming messages
socket.on('chat-message', (data) => {
    if (data.sessionId === currentSessionId) {
        addMessageToChat(data);
    } else {
        // Show notification for new message in other conversations
        const conversationItem = document.querySelector(`[data-session="${data.sessionId}"]`);
        if (conversationItem && data.senderType === 'user') {
            const unreadBadge = conversationItem.querySelector('.unread-badge');
            if (unreadBadge) {
                const currentCount = parseInt(unreadBadge.textContent) || 0;
                unreadBadge.textContent = currentCount + 1;
                unreadBadge.style.display = 'flex';
            }
        }
    }
});

function showLogoutModal() {
    document.getElementById('adminLogoutModal').style.display = 'flex';
}

function closeLogoutModal() {
    document.getElementById('adminLogoutModal').style.display = 'none';
}

function confirmAdminLogout() {
    fetch('/auth/logout', { method: 'POST' })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                window.location.href = result.redirect;
            }
        });
}
</script>

<style>
.chat-management-container {
    display: grid;
    grid-template-columns: 350px 1fr;
    gap: 2rem;
    height: 600px;
    background: white;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: var(--shadow-lg);
}

.chat-list {
    background: #f8fafc;
    border-right: 1px solid #e2e8f0;
    overflow-y: auto;
}

.chat-list h3 {
    padding: 1.5rem;
    margin: 0;
    background: white;
    border-bottom: 1px solid #e2e8f0;
    font-size: 1.1rem;
    font-weight: 600;
}

.conversation-item {
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #e2e8f0;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
}

.conversation-item:hover,
.conversation-item.active {
    background: white;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.user-info h4 {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: #1e293b;
}

.user-info p {
    margin: 0;
    font-size: 0.875rem;
    color: #64748b;
}

.conversation-meta {
    margin-top: 0.5rem;
}

.last-message {
    font-size: 0.875rem;
    color: #64748b;
    margin-bottom: 0.25rem;
}

.message-time {
    font-size: 0.75rem;
    color: #94a3b8;
}

.unread-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: #ef4444;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 600;
}

.chat-window {
    display: flex;
    flex-direction: column;
}

.chat-header {
    padding: 1.5rem;
    background: white;
    border-bottom: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chat-header h3 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: #1e293b;
}

.chat-status {
    font-size: 0.875rem;
    color: #22c55e;
    font-weight: 500;
}

.chat-messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    background: #f8fafc;
}

.empty-state {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #64748b;
    font-size: 1.1rem;
}

.message {
    margin-bottom: 1rem;
    display: flex;
}

.message.user .message-content {
    background: #1e40af;
    color: white;
    margin-left: auto;
    border-radius: 18px 18px 4px 18px;
}

.message.admin .message-content {
    background: white;
    color: #1e293b;
    margin-right: auto;
    border-radius: 18px 18px 18px 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.message-content {
    max-width: 70%;
    padding: 0.75rem 1rem;
}

.message-text {
    margin-bottom: 0.25rem;
    line-height: 1.4;
}

.message-time {
    font-size: 0.75rem;
    opacity: 0.7;
}

.chat-input-area {
    padding: 1rem;
    background: white;
    border-top: 1px solid #e2e8f0;
}

.chat-input-container {
    display: flex;
    gap: 0.75rem;
}

#messageInput {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 25px;
    font-size: 0.875rem;
    outline: none;
    transition: border-color 0.3s ease;
}

#messageInput:focus {
    border-color: #1e40af;
}

#sendMessage {
    padding: 0.75rem 1.5rem;
    background: #1e40af;
    color: white;
    border: none;
    border-radius: 25px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
}

#sendMessage:hover {
    background: #1d4ed8;
}

.modal-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
}

@media (max-width: 768px) {
    .chat-management-container {
        grid-template-columns: 1fr;
        height: auto;
    }
    
    .chat-list {
        max-height: 300px;
    }
}
</style>